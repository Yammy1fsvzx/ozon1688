#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pandas as pd
from datetime import datetime
from src.core.database import Database
from src.core.models import ProductProfitability, OzonProduct, AlibabaProduct, Task, MatchedProduct
from sqlalchemy import desc
from src.utils.logger import logger

class ExcelGenerator:
    def __init__(self):
        self.db = Database()
    
    def generate_report(self, tasks: list) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
        
        :param tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {len(tasks)} –∑–∞–¥–∞—á")
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {tasks}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session = self.db.get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á
            task_ids = [task['id'] for task in tasks]
            logger.debug(f"ID –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á–µ—Ç–∞: {task_ids}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SQLAlchemy
            query = session.query(
                OzonProduct.product_name.label('–¢–æ–≤–∞—Ä'),
                OzonProduct.url.label('–°—Å—ã–ª–∫–∞ OZON'),
                AlibabaProduct.url.label('_–°—Å—ã–ª–∫–∞ 1688_'), # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è, —Å–∫—Ä—ã—Ç–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ProductProfitability.selling_price.label('–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'),
                AlibabaProduct.price_usd.label('–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏'),
                ProductProfitability.marketplace_commission.label('–ö–æ–º–∏—Å—Å–∏—è –ú–ü'),
                ProductProfitability.taxes.label('–ù–∞–ª–æ–≥–∏'),
                OzonProduct.weight.label('–í–µ—Å —Ç–æ–≤–∞—Ä–∞'),
                OzonProduct.dimensions.label('–û–±—ä–µ–º —É–ø–∞–∫–æ–≤–∫–∏'),
                ProductProfitability.delivery_cost.label('–î–æ—Å—Ç–∞–≤–∫–∞ –†–æ—Å—Å–∏–∏'),
                ProductProfitability.packaging_cost.label('–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'),
                ProductProfitability.agent_commission.label('–ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞'),
                ProductProfitability.total_profit.label('–ò—Ç–æ–≥–æ'),
                ProductProfitability.profitability_percent.label('–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %'),
                Task.status.label('–°—Ç–∞—Ç—É—Å'),
                Task.created_at.label('–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
            ).join(
                Task,
                Task.id == OzonProduct.task_id
            ).outerjoin(
                MatchedProduct,
                MatchedProduct.ozon_product_id == OzonProduct.id
            ).outerjoin(
                AlibabaProduct,
                MatchedProduct.alibaba_product_id == AlibabaProduct.id
            ).outerjoin(
                ProductProfitability,
                ProductProfitability.match_id == MatchedProduct.id
            ).filter(
                Task.id.in_(task_ids)
            ).order_by(
                Task.created_at.desc()
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = query.all()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ DataFrame
            data = []
            for row in results:
                row_dict = {}
                for column, value in row._mapping.items():
                    # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ "–ù/–î"
                    if value is None or (isinstance(value, (int, float)) and value == 0):
                        row_dict[column] = "–ù/–î"
                    else:
                        row_dict[column] = value
                data.append(row_dict)
            
            df = pd.DataFrame(data)
            logger.debug(f"–°–æ–∑–¥–∞–Ω DataFrame —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            numeric_columns = [
                '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏', '–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏', '–ö–æ–º–∏—Å—Å–∏—è –ú–ü', '–ù–∞–ª–æ–≥–∏',
                '–í–µ—Å —Ç–æ–≤–∞—Ä–∞', '–î–æ—Å—Ç–∞–≤–∫–∞ –†–æ—Å—Å–∏–∏', '–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                '–ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞', '–ò—Ç–æ–≥–æ', '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %'
            ]
            
            for col in numeric_columns:
                if col in df.columns:
                    if col == '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        df[col] = df[col].apply(lambda x: f"{float(x):.2f}%" if x != "–ù/–î" else "–ù/–î")
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        df[col] = df[col].apply(lambda x: f"{float(x):.2f}" if x != "–ù/–î" else "–ù/–î")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
            status_emojis = {
                'pending': '‚è≥',
                'ozon_processed': 'üîÑ',
                'completed': '‚úÖ',
                'error': '‚ùå',
                'fatal': 'üí•',
                'not_found': 'üîç',
                'failed': '‚ö†Ô∏è'
            }
            df['–°—Ç–∞—Ç—É—Å'] = df['–°—Ç–∞—Ç—É—Å'].apply(lambda x: status_emojis.get(x, '‚Ä¢'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            df['–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'] = df['–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'].apply(lambda x: x.strftime('%d.%m.%Y %H:%M') if x != "–ù/–î" else "–ù/–î")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:
                # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ 1688 –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ Excel
                df_for_excel = df.drop(columns=['_–°—Å—ã–ª–∫–∞ 1688_'])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df_for_excel.to_excel(writer, sheet_name='–û—Ç—á–µ—Ç', index=False)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–π –∫–Ω–∏–≥–∏ –∏ –ª–∏—Å—Ç–∞
                workbook = writer.book
                worksheet = writer.sheets['–û—Ç—á–µ—Ç']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#4B0082',
                    'font_color': 'white',
                    'border': 1,
                    'text_wrap': True,
                    'align': 'center',
                    'valign': 'vcenter'
                })
                
                # –§–æ—Ä–º–∞—Ç –¥–ª—è —Å—Å—ã–ª–æ–∫
                link_format = workbook.add_format({
                    'font_color': 'blue',
                    'underline': True,
                    'align': 'center',
                    'valign': 'vcenter',
                    'text_wrap': True
                })
                
                # –§–æ—Ä–º–∞—Ç –¥–ª—è —á–∏—Å–µ–ª
                number_format = workbook.add_format({
                    'num_format': '#,##0.00',
                    'align': 'center',
                    'valign': 'vcenter'
                })
                
                # –§–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                percent_format = workbook.add_format({
                    'num_format': '0.00%',
                    'align': 'center',
                    'valign': 'vcenter'
                })
                
                # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                text_format = workbook.add_format({
                    'align': 'center',
                    'valign': 'vcenter',
                    'text_wrap': True
                })
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                for col_num, value in enumerate(df_for_excel.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
                    if value in ['–¢–æ–≤–∞—Ä']:
                        worksheet.set_column(col_num, col_num, 40)
                    elif value in ['–°—Å—ã–ª–∫–∞ OZON']:
                        worksheet.set_column(col_num, col_num, 50)
                    elif value in ['–û–±—ä–µ–º —É–ø–∞–∫–æ–≤–∫–∏', '–°—Ç–∞—Ç—É—Å']:
                        worksheet.set_column(col_num, col_num, 20)
                    elif value == '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è':
                        worksheet.set_column(col_num, col_num, 25)
                    else:
                        worksheet.set_column(col_num, col_num, 15)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                for row_num in range(1, len(df) + 1):
                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –Ω–∞ 1688
                    product_name = df.iloc[row_num-1]['–¢–æ–≤–∞—Ä']
                    alibaba_url = df.iloc[row_num-1]['_–°—Å—ã–ª–∫–∞ 1688_']
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ "–ù/–î"
                    if alibaba_url != "–ù/–î":
                        worksheet.write_url(row_num, 0, alibaba_url, link_format, product_name)
                    else:
                        worksheet.write(row_num, 0, product_name, text_format)
                    
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ OZON
                    ozon_url = df.iloc[row_num-1]['–°—Å—ã–ª–∫–∞ OZON']
                    worksheet.write_url(row_num, 1, ozon_url, link_format)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                    for col_num, col_name in enumerate(df_for_excel.columns):
                        value = df_for_excel.iloc[row_num-1][col_name]
                        if col_name in numeric_columns:
                            if value != "–ù/–î":
                                if col_name == '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å %':
                                    worksheet.write(row_num, col_num, float(value.rstrip('%')) / 100, percent_format)
                                else:
                                    worksheet.write(row_num, col_num, float(value), number_format)
                            else:
                                worksheet.write(row_num, col_num, value, text_format)
                        elif col_name not in ['–¢–æ–≤–∞—Ä', '–°—Å—ã–ª–∫–∞ OZON']:
                            worksheet.write(row_num, col_num, value, text_format)
                
                # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                worksheet.freeze_panes(1, 0)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
                worksheet.set_default_row(30)
            
            logger.info(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            return None
        finally:
            if session:
                session.close() 