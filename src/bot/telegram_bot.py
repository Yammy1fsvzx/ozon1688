import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
from src.core.database import Database
from src.utils.logger import logger
from src.bot.keyboards import get_reprocess_keyboard, get_main_keyboard, get_subscription_keyboard, get_notifications_keyboard
from src.utils.excel_generator import ExcelGenerator
import os
from datetime import datetime, timedelta

class TelegramBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.db = Database()
        self.excel_generator = ExcelGenerator()
        self.last_report_request = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞
        self.last_stats_request = {}   # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.last_help_request = {}    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏
        self.last_active_request = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_text, lambda msg: not msg.text.startswith('/'))
        self.dp.callback_query.register(self.handle_callback, lambda c: c.data.startswith('reprocess:') or c.data.startswith('action:') or c.data.startswith('subscription:') or c.data.startswith('admin_subscription:') or c.data.startswith('notifications:'))
    
    async def start_command(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(message.from_user.id)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            if not user:
                user = self.db.add_user(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
            
            if not user:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_info = self.db.check_subscription(user.id)
            if not subscription_info:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                f"ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ 1688.com –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å Ozon.\n\n"
                f"üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            if subscription_info['is_active']:
                if subscription_info['type'] == 'free':
                    welcome_text += (
                        f"‚Ä¢ –¢–∏–ø: üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_left']}/{subscription_info['requests_limit']}\n"
                    )
                elif subscription_info['type'] == 'limited':
                    end_date = subscription_info['end_date']
                    date_str = end_date.strftime('%d.%m.%Y') if end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    welcome_text += (
                        f"‚Ä¢ –¢–∏–ø: üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è\n"
                        f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_left']}/{subscription_info['requests_limit']}\n"
                        f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_str}\n"
                    )
                else:  # unlimited
                    end_date = subscription_info['end_date']
                    date_str = end_date.strftime('%d.%m.%Y') if end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    welcome_text += (
                        f"‚Ä¢ –¢–∏–ø: üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è\n"
                        f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_str}\n"
                    )
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
                if subscription_info['type'] == 'free':
                    welcome_text += (
                        f"‚Ä¢ –¢–∏–ø: üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_used']}/{subscription_info['requests_limit']}\n"
                        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n"
                    )
                else:  # limited –∏–ª–∏ unlimited
                    end_date = subscription_info['end_date']
                    date_str = end_date.strftime('%d.%m.%Y') if end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    welcome_text += (
                        f"‚Ä¢ –¢–∏–ø: {'üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è' if subscription_info['type'] == 'limited' else 'üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è'}\n"
                        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {date_str}\n"
                    )
            
            welcome_text += (
                "\nüìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon, –∏ —è –Ω–∞–π–¥—É –∞–Ω–∞–ª–æ–≥–∏ –Ω–∞ 1688.com\n"
                "üîç –ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                welcome_text,
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()

    async def handle_action_callback(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return

            action = callback.data.split(':')[1]
            
            if action == 'close':
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.delete()
                await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                return
                
            elif action == 'notifications':
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                enabled = self.db.get_notifications_settings(user.id)
                await callback.message.answer(
                    "üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_notifications_keyboard(enabled),
                    parse_mode="Markdown"
                )
                
            elif action == 'enable':
                # –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self.db.update_notifications_settings(user.id, True):
                    await callback.message.edit_text(
                        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã*\n\n"
                        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                        "‚Ä¢ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∞—Ö\n"
                        "‚Ä¢ –°—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                        reply_markup=get_notifications_keyboard(True),
                        parse_mode="Markdown"
                    )
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    
            elif action == 'disable':
                # –í—ã–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self.db.update_notifications_settings(user.id, False):
                    await callback.message.edit_text(
                        "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã*\n\n"
                        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
                        "‚Ä¢ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∞—Ö\n"
                        "‚Ä¢ –°—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                        reply_markup=get_notifications_keyboard(False),
                        parse_mode="Markdown"
                    )
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

            elif action == 'subscription':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_info = self.db.check_subscription(user.id)
                if not subscription_info:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.")
                    return
            
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                subscription_types = self.db.get_subscription_info()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö:\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
                if subscription_info['is_active']:
                    if subscription_info['type'] == 'free':
                        message += f"üÜì –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                        message += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_left']}/{subscription_info['requests_limit']}\n\n"
                    elif subscription_info['type'] == 'limited':
                        end_date = subscription_info['end_date']
                        date_str = end_date.strftime('%d.%m.%Y') if end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        message += f"üíé –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è\n"
                        message += f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_left']}/{subscription_info['requests_limit']}\n"
                        message += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_str}\n\n"
                    else:  # unlimited
                        end_date = subscription_info['end_date']
                        date_str = end_date.strftime('%d.%m.%Y') if end_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        message += f"üëë –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è\n"
                        message += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_str}\n\n"
                else:
                    if subscription_info['type'] == 'free':
                        message += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                        message += "üÜì –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                        message += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription_info['requests_used']}/{subscription_info['requests_limit']}\n"
                        message += "‚ùó –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\n"
                    elif subscription_info['type'] in ['limited', 'unlimited']:
                        message += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                        message += f"üíé –¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {'–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è' if subscription_info['type'] == 'limited' else '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è'}\n"
                        message += "‚ùó –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                message += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                
                for sub_type, info in subscription_types.items():
                    if sub_type != 'free':  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                        message += f"{info['name']} - {info['price']} ‚ÇΩ\n"
                        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {info['requests']}\n"
                        message += "–í–∫–ª—é—á–∞–µ—Ç:\n"
                        for feature in info['features']:
                            message += f"‚Ä¢ {feature}\n"
                        message += "\n"
                
                message += "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
                
                await callback.message.answer(
                    message,
                    reply_markup=get_subscription_keyboard(subscription_info, user.is_admin)
                )
            
            elif action == 'stats':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                current_time = datetime.now()
                if callback.from_user.id in self.last_stats_request:
                    time_diff = (current_time - self.last_stats_request[callback.from_user.id]).total_seconds()
                    if time_diff < 5:  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                        return
                
                self.last_stats_request[callback.from_user.id] = current_time
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stats = self.db.get_tasks_statistics(user.id)
                
                if not stats:
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                    return
                
                stats_text = (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:*\n\n"
                    f"üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}\n"
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {stats['not_found']}\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {stats['error']}\n"
                    f"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {stats['failed']}\n"
                    f"üíÄ –§–∞—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {stats['fatal']}\n"
                    f"‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['ozon_processed']}\n"
                    f"üìù –í –æ—á–µ—Ä–µ–¥–∏: {stats['pending']}"
                )
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")]
                ])
                await callback.message.answer(stats_text, parse_mode="Markdown", reply_markup=keyboard)
                
            elif action == 'report':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—á–µ—Ç–æ–≤
                current_time = datetime.now()
                if callback.from_user.id in self.last_report_request:
                    time_diff = (current_time - self.last_report_request[callback.from_user.id]).total_seconds()
                    if time_diff < 5:  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç—á–µ—Ç–∞.")
                        return
                
                self.last_report_request[callback.from_user.id] = current_time
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tasks = self.db.get_user_tasks(user.id)
                if not tasks:
                    await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report_path = self.excel_generator.generate_report(tasks)
                if report_path:
                    report_file = FSInputFile(report_path)
                    await callback.message.answer_document(
                        document=report_file,
                        caption="üìä *–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!*",
                        parse_mode="Markdown"
                    )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(report_path)
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
            elif action == 'active':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                current_time = datetime.now()
                if callback.from_user.id in self.last_active_request:
                    time_diff = (current_time - self.last_active_request[callback.from_user.id]).total_seconds()
                    if time_diff < 5:  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                        return
                
                self.last_active_request[callback.from_user.id] = current_time
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tasks = self.db.get_user_tasks(user.id, status='active')
                if not tasks:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                    return
            
                active_text = "üìù *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
                for task in tasks:
                    status_emoji = "‚è≥" if task['status'] == 'pending' else "üîç"
                    status_text = "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏" if task['status'] == 'pending' else "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
                    active_text += f"{status_emoji} *{status_text}*\n"
                    active_text += f"üîó {task['url']}\n"
                    active_text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {task['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")]
                ])
                
                await callback.message.answer(active_text, parse_mode="Markdown", reply_markup=keyboard)
                
            elif action == 'help':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–º–æ—â–∏
                current_time = datetime.now()
                if callback.from_user.id in self.last_help_request:
                    time_diff = (current_time - self.last_help_request[callback.from_user.id]).total_seconds()
                    if time_diff < 5:  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–º–æ—â–∏.")
                        return
                
                self.last_help_request[callback.from_user.id] = current_time
                
                help_text = (
                    "ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*\n\n"
                    "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon\n"
                    "2Ô∏è‚É£ –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç —Ç–æ–≤–∞—Ä –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
                    "3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∞—Ö\n\n"
                    "üíé *–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫:*\n"
                    "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 3 –∑–∞–ø—Ä–æ—Å–∞\n"
                    "‚Ä¢ üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n"
                    "‚Ä¢ üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                    "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫\n\n"
                    "üìà *–û—Ç—á–µ—Ç—ã:*\n"
                    "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel\n"
                    "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö\n"
                    "‚Ä¢ –í–∫–ª—é—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏\n\n"
                    "üìù *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n"
                    "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
                    "‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                    "üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
                    "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
                    "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
                    "‚Ä¢ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
                    "‚Ä¢ –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                    "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫—Ä—ã—Ç—å"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")]
                ])
                await callback.message.answer(help_text, reply_markup=keyboard, parse_mode="Markdown")
                
            elif action == 'show_all_users':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                if not user.is_admin:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = self.db.get_all_users()
                if not users or len(users) == 0:
                    await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                await callback.message.answer(
                    f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (–≤—Å–µ–≥–æ: {len(users)})\n\n"
                    f"–ù–∏–∂–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.",
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                for i, user_data in enumerate(users[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    subscription = self.db.check_subscription(user_data['id'])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = f"{i}. {user_data['first_name'] or ''} {user_data['last_name'] or ''} (@{user_data['username'] or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n"
                    user_info += f"   ID: {user_data['id']}\n"
                    
                    if subscription:
                        sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                        sub_type = ""
                        if subscription['type'] == 'free':
                            sub_type = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è"
                        elif subscription['type'] == 'limited':
                            sub_type = "üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è"
                        elif subscription['type'] == 'unlimited':
                            sub_type = "üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è"
                        elif subscription['type'] == 'admin':
                            sub_type = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                        
                        user_info += f"   –ü–æ–¥–ø–∏—Å–∫–∞: {sub_type} ({sub_status})\n"
                        
                        if subscription['type'] not in ['unlimited', 'admin']:
                            user_info += f"   –ó–∞–ø—Ä–æ—Å—ã: {subscription['requests_used']}/{subscription['requests_limit']}\n"
                        
                        if subscription['end_date']:
                            date_str = subscription['end_date'].strftime('%d.%m.%Y') if subscription['end_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                            user_info += f"   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_str}\n"
                    else:
                        user_info += "   –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    keyboard = [
                        [
                            InlineKeyboardButton(text="üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è", callback_data=f"admin_subscription:activate:limited:{user_data['id']}"),
                            InlineKeyboardButton(text="üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è", callback_data=f"admin_subscription:activate:unlimited:{user_data['id']}")
                        ],
                        [
                            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")
                        ]
                    ]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    await callback.message.answer(
                        user_info,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                        parse_mode="Markdown"
                    )
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ
                if len(users) > 10:
                    await callback.message.answer(
                        f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                        f"–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:admin")]
                        ]),
                        parse_mode="Markdown"
                    )
                
                return
                
            elif action == 'system_stats':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                if not user.is_admin:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = self.db.get_all_users()
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_users = len(users)
                admin_users = sum(1 for user in users if user['is_admin'])
                
                # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
                free_subs = 0
                limited_subs = 0
                unlimited_subs = 0
                active_subs = 0
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
                for user_data in users:
                    subscription = self.db.check_subscription(user_data['id'])
                    if subscription['is_active']:
                        active_subs += 1
                    
                    if subscription['type'] == 'free':
                        free_subs += 1
                    elif subscription['type'] == 'limited':
                        limited_subs += 1
                    elif subscription['type'] == 'unlimited' or subscription['type'] == 'admin':
                        unlimited_subs += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
                task_stats = self.db.get_tasks_statistics()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                stats_message = (
                    "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                    f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n\n"
                    f"üíé *–ü–æ–¥–ø–∏—Å–∫–∏:*\n"
                    f"‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: {free_subs}\n"
                    f"‚Ä¢ üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ: {limited_subs}\n"
                    f"‚Ä¢ üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ: {unlimited_subs}\n\n"
                    f"üîÑ *–ó–∞–¥–∞—á–∏:*\n"
                )
                
                if task_stats:
                    stats_message += (
                        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {task_stats.get('total', 0)}\n"
                        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_stats.get('completed', 0)}\n"
                        f"‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {task_stats.get('not_found', 0)}\n"
                        f"‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {task_stats.get('error', 0) + task_stats.get('failed', 0) + task_stats.get('fatal', 0)}\n"
                        f"‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {task_stats.get('ozon_processed', 0) + task_stats.get('pending', 0)}\n"
                    )
                else:
                    stats_message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:admin"),
                        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")
                    ]
                ]
                
                await callback.message.answer(
                    stats_message,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="Markdown"
                )
                
                return
                
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()

    async def handle_subscription_callback(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return

            action = callback.data.split(':')[1]
            
            if action == 'admin':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                if not user.is_admin:
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_menu = (
                    "üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_keyboard = [
                    [
                        InlineKeyboardButton(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="action:show_all_users")
                    ],
                    [
                        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="action:system_stats")
                    ],
                    [
                        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="action:close")
                    ]
                ]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await callback.message.answer(
                    admin_menu,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=admin_keyboard),
                    parse_mode="Markdown"
                )
                
                return
                
            elif action == 'info':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_info = self.db.check_subscription(user.id)
                if not subscription_info:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
                message = "üíé *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n"
                
                if subscription_info['is_active']:
                    if subscription_info['type'] == 'free':
                        message += (
                            "üÜì *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                            f"üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {subscription_info['requests_used']}/{subscription_info['requests_limit']}\n"
                            f"üìä *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {subscription_info['requests_left']}\n"
                            "üìÖ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n"
                        )
                    elif subscription_info['type'] == 'limited':
                        message += (
                            "üíé *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è\n"
                            f"üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {subscription_info['requests_used']}/{subscription_info['requests_limit']}\n"
                            f"üìä *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:* {subscription_info['requests_left']}\n"
                            f"üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {subscription_info['end_date'].strftime('%d.%m.%Y') if subscription_info['end_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                        )
                    else:  # unlimited
                        message += (
                            "üëë *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è\n"
                            "üìä *–ó–∞–ø—Ä–æ—Å—ã:* –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                            f"üìÖ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {subscription_info['end_date'].strftime('%d.%m.%Y') if subscription_info['end_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                        )
                else:
                    if subscription_info['type'] == 'free':
                        message += (
                            "‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞*\n"
                            "üÜì *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è\n"
                            f"üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤:* {subscription_info['requests_used']}/{subscription_info['requests_limit']}\n"
                            "‚ùó *–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω*\n\n"
                        )
                    elif subscription_info['type'] in ['limited', 'unlimited']:
                        message += (
                            "‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞*\n"
                            f"üíé *–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:* {'–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è' if subscription_info['type'] == 'limited' else '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è'}\n"
                            "‚ùó *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫*\n\n"
                        )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
                message += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
                subscription_types = self.db.get_subscription_info()
                
                for sub_type, info in subscription_types.items():
                    if sub_type != 'free':  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                        message += f"*{info['name']}* - {info['price']} ‚ÇΩ\n"
                        message += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {info['requests']}\n"
                        message += "‚ú® –í–∫–ª—é—á–∞–µ—Ç:\n"
                        for feature in info['features']:
                            message += f"‚Ä¢ {feature}\n"
                        message += "\n"
                
                message += "üìû *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.*"
                
                await callback.message.answer(
                    message,
                    reply_markup=get_subscription_keyboard(subscription_info, user.is_admin),
                    parse_mode="Markdown"
                )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()

    async def handle_admin_subscription_callback(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = callback.data.replace('admin_subscription:', '')
        parts = data.split(':')
        
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        action = parts[0]  # –î–µ–π—Å—Ç–≤–∏–µ (activate)
        sub_type = parts[1]  # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (limited, unlimited)
        user_id = int(parts[2])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª callback
        admin_user = self.db.get_user_by_telegram_id(callback.from_user.id)
        if not admin_user or not admin_user.is_admin:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        target_user = self.db.get_user_by_id(user_id)
        if not target_user:
            await callback.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if action == 'activate':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
            days = 30  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
            requests_limit = None
            
            if sub_type == 'limited':
                requests_limit = 100  # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_name = "üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è"
            elif sub_type == 'unlimited':
                requests_limit = None  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–π
                subscription_name = "üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è"
            else:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
                return
                
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = self.db.activate_subscription(
                user_id=target_user.id,
                subscription_type=sub_type,
                days=days,
                requests_limit=requests_limit
            )
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏
                end_date = (datetime.now() + timedelta(days=days)).strftime('%d.%m.%Y')
                admin_msg = (
                    f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞*\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.first_name or ''} {target_user.last_name or ''} (@{target_user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n"
                    f"üÜî ID: {target_user.id}\n"
                    f"üìù –¢–∏–ø: {subscription_name}\n"
                    f"üìÜ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π (–¥–æ {end_date})\n"
                )
                
                if requests_limit:
                    admin_msg += f"üî¢ –ó–∞–ø—Ä–æ—Å—ã: {requests_limit}\n"
                else:
                    admin_msg += f"üî¢ –ó–∞–ø—Ä–æ—Å—ã: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                
                await callback.message.answer(
                    admin_msg,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="subscription:admin")]
                    ])
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
                try:
                    user_msg = (
                        f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!*\n\n"
                        f"üìù –¢–∏–ø: {subscription_name}\n"
                        f"üìÜ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π (–¥–æ {end_date})\n"
                    )
                    
                    if requests_limit:
                        user_msg += f"üî¢ –ó–∞–ø—Ä–æ—Å—ã: {requests_limit}\n"
                    else:
                        user_msg += f"üî¢ –ó–∞–ø—Ä–æ—Å—ã: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    user_msg += f"\nüë§ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                    
                    await self.bot.send_message(
                        chat_id=target_user.telegram_id,
                        text=user_msg,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    await callback.message.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    async def handle_url(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL-—Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_telegram_id(message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_info = self.db.check_subscription(user.id)
            if not subscription_info:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            if not subscription_info['is_active']:
                await message.answer(
                    "‚ùå *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.*\n\n"
                    "üíé *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                    "‚Ä¢ üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n"
                    "‚Ä¢ üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n"
                    "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                    reply_markup=get_subscription_keyboard(subscription_info, user.is_admin),
                    parse_mode="Markdown"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –∫—Ä–æ–º–µ unlimited –∏ –∞–¥–º–∏–Ω–æ–≤
            if not user.is_admin and subscription_info['type'] != 'unlimited':
                current_requests = self.db.get_user_by_telegram_id(message.from_user.id).requests_used
                requests_limit = subscription_info['requests_limit']
                
                if current_requests >= requests_limit:
                    await message.answer(
                        f"‚ùå *–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.*\n\n"
                        f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_info['type']}\n"
                        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {current_requests}/{requests_limit}\n\n"
                        "üíé *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
                        "‚Ä¢ üíé –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–µ—Å—è—Ü\n"
                        "‚Ä¢ üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n"
                        "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                        reply_markup=get_subscription_keyboard(subscription_info, user.is_admin),
                        parse_mode="Markdown"
                    )
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL
            if not message.text.startswith(('http://', 'https://')):
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ Ozon
            if 'ozon.ru' not in message.text:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon.")
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            if not user.is_admin and subscription_info['type'] != 'unlimited':
                if not self.db.increment_requests_used(user.id):
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            task_id = self.db.add_task(message.text, user.id)
            if not task_id:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                if not user.is_admin and subscription_info['type'] != 'unlimited':
                    self.db.decrement_requests_used(user.id)
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
            await message.answer(
                "‚úÖ *–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.*\n\n"
                "‚è≥ *–°—Ç–∞—Ç—É—Å:*\n"
                "‚Ä¢ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞\n"
                "‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )

            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()
    
    async def handle_reprocess_callback(self, callback: CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = callback.data.replace('reprocess:', '')
            task_id = int(data)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª callback
            user = self.db.get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
            task = self.db.get_task(task_id)
            if not task:
                await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if task.user_id != user.id and not user.is_admin:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = self.db.check_subscription(user.id)
            if not subscription['is_active']:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
                subscription_type = subscription['type']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                if subscription_type == 'free':
                    message = (
                        "‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É*\n\n"
                        "–í–∞—à–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∞.\n"
                        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription['requests_used']}/{subscription['requests_limit']}\n\n"
                        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
                    )
                else:
                    message = (
                        "‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É*\n\n"
                        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                        "–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
                    )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üíé –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription:info")]
                ])
                
                await callback.message.answer(message, reply_markup=keyboard, parse_mode="Markdown")
                return
                
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –º–µ–Ω—è—è –µ–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'pending'
            success = self.db.update_task_status(task_id, 'pending')
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.db.increment_requests_used(user.id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                await callback.message.answer(
                    f"üîÑ *–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞*\n\n"
                    f"URL: {task.url}\n"
                    f"ID –∑–∞–¥–∞—á–∏: {task_id}\n\n"
                    f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
                    f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()
    
    async def handle_callback(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            data = callback.data
            
            if data.startswith('subscription:'):
                await self.handle_subscription_callback(callback)
            elif data.startswith('action:'):
                await self.handle_action_callback(callback)
            elif data.startswith('admin_subscription:'):
                await self.handle_admin_subscription_callback(callback)
            elif data.startswith('reprocess:'):
                await self.handle_reprocess_callback(callback)
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()
            
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        """
        logger.info("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        await self.dp.start_polling(self.bot)

    async def send_task_results(self, task_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task = self.db.get_task(task_id)
            if not task:
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_id(task.user_id)
            if not user:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not self.db.get_notifications_settings(user.id):
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = (
                f"‚úÖ *–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"üîó *–¢–æ–≤–∞—Ä:* {task.url}\n"
                f"üìä *–°—Ç–∞—Ç—É—Å:* {task.status}\n"
                f"‚è± *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* {task.processing_time:.2f} —Å–µ–∫\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∞—Ö
            if task.status == 'completed':
                analogs = self.db.get_task_analogs(task_id)
                if analogs:
                    message += "üì¶ *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏:*\n\n"
                    for analog in analogs:
                        message += (
                            f"‚Ä¢ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {analog['title']}\n"
                            f"  *–¶–µ–Ω–∞:* {analog['price']} $\n"
                            f"  *–ü—Ä–∏–±—ã–ª—å:* {analog['profit']} $\n"
                            f"  *–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:* {analog['margin']:.1f}%\n"
                            f"  *–°—Å—ã–ª–∫–∞:* {analog['url']}\n\n"
                        )
                else:
                    message += "‚ùå –ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
            if task.status in ['error', 'failed', 'fatal']:
                message += f"‚ö†Ô∏è *–û—à–∏–±–∫–∞:* {task.error_message}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            message += "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–ü–æ–≤—Ç–æ—Ä–∏—Ç—å* –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                reply_markup=get_reprocess_keyboard(task_id),
                parse_mode="Markdown"
            )

            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.close_session()

    async def handle_text(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ URL
            if message.text.startswith(('http://', 'https://')):
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É URL –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                await self.handle_url(message)
                return
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ URL, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon.\n\n"
                "üí° –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https:// –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ozon.ru",
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            self.db.close_session()