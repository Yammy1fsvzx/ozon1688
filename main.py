#!/usr/bin/env python
# -*- coding: utf-8 -*-

import asyncio
import argparse
import os
import multiprocessing
from dotenv import load_dotenv
from src.bot.telegram_bot import TelegramBot
from src.core.task_processor import TaskProcessor
from src.utils.logger import setup_logger, logger
from src.core.database import Database
from src.core.browser_manager import BrowserManager

def parse_arguments():
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    """
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ Ozon')
    parser.add_argument('--headless', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
    parser.add_argument('--no-logs', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª')
    return parser.parse_args()

def run_processor(headless: bool, debug: bool, save_logs: bool):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    
    :param headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    :param debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    :param save_logs: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    """
    # –ù–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –∑–∞–Ω–æ–≤–æ, —Ç.–∫. –æ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    db = Database()
    browser_manager = BrowserManager(headless=headless)
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TaskProcessor —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    processor = TaskProcessor(db=db, browser_manager=browser_manager)
    asyncio.run(processor.start())

def run_bot(bot_token: str, debug: bool, save_logs: bool):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    
    :param bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
    :param debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    :param save_logs: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
    """
    # –ù–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –∑–∞–Ω–æ–≤–æ, —Ç.–∫. –æ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    bot = TelegramBot(bot_token)
    asyncio.run(bot.start())

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–æ—Ç–∏–ø –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("""
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ñ‚†Ñ‚†Ñ
‚†Ñ‚†Ñ‚£º‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£è‚°è‚†Ñ‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢ª‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ñ‚†Ñ
‚†Ñ‚†Ñ‚°ü‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚¢ª‚£ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ
‚†Ñ‚¢∞‚†É‚£ø‚£ø‚†ø‚£ø‚£ø‚£ø‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ñ‚¢ø‚£ø‚£ø‚£ø‚°Ñ‚†Ñ
‚†Ñ‚¢∏‚¢†‚£ø‚£ø‚£ß‚°ô‚£ø‚£ø‚°Ü‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†õ‚¢ø‚£ø‚£ø‚°á‚†∏‚£ø‚°ø‚£∏‚°á‚†Ñ
‚†Ñ‚†à‚°Ü‚£ø‚£ø‚£ø‚£ø‚£¶‚°ô‚†≥‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£†‚£§‚£Ä‚£à‚†ô‚†É‚†Ñ‚†ø‚¢á‚£ø‚°á‚†Ñ
‚†Ñ‚†Ñ‚°á‚¢ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ü‚°Ä‚£º‚£ø‚°á‚†Ñ
‚†Ñ‚†Ñ‚¢π‚°ò‚£ø‚£ø‚£ø‚¢ø‚£∑‚°Ä‚†Ñ‚¢Ä‚£¥‚£æ‚£ü‚†â‚†â‚†â‚†â‚£Ω‚£ø‚£ø‚£ø‚£ø‚†á‚¢π‚£ø‚†É‚†Ñ
‚†Ñ‚†Ñ‚†Ñ‚¢∑‚°ò‚¢ø‚£ø‚£é‚¢ª‚£∑‚†∞‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚£Ä‚£¥‚£ø‚£ø‚£ø‚†ü‚¢´‚°æ‚¢∏‚°ü‚†Ñ‚†Ñ
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ª‚£¶‚°ô‚†ø‚£ß‚†ô‚¢∑‚†ô‚†ª‚†ø‚¢ø‚°ø‚†ø‚†ø‚†õ‚†ã‚†â‚†Ñ‚†Ç‚†ò‚†Å‚†û‚†Ñ‚†Ñ‚†Ñ
‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚†ô‚†ë‚£†‚£§‚£¥‚°ñ‚†Ñ‚†ø‚£ã‚£â‚£â‚°Å‚†Ñ‚¢æ‚£¶‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ
    """)
    print("\n" + "-"*50 + "\n") # –î–æ–±–∞–≤–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–∂–¥—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    # –≠—Ç–æ—Ç –ª–æ–≥–≥–µ—Ä –±—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_logger(debug=args.debug, save_logs=not args.no_logs)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Ozon1688")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN)")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        bot_process = multiprocessing.Process(
            target=run_bot,
            args=(bot_token, args.debug, not args.no_logs)
        )
        
        processor_process = multiprocessing.Process(
            target=run_processor,
            args=(args.headless, args.debug, not args.no_logs)
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        bot_process.start()
        processor_process.start()
        
        logger.info("‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        bot_process.join()
        processor_process.join()
        
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        if 'bot_process' in locals() and bot_process.is_alive():
            bot_process.terminate()
        if 'processor_process' in locals() and processor_process.is_alive():
            processor_process.terminate()
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()